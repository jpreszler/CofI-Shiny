library(geosphere)
for(i in 1:length(indx$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/",indx$File[i],".gpx", sep="")) %>% mutate(Name = indx$File[i])
ifelse(i==1,runs <- run, runs <- rbind.data.frame(runs,run))
}
geocent.rad <- function(lat){
polar.rad <-6356.7523
equat.rad <- 6378.1370
sqrt(((equat.rad^2*cos(lat))^2+(polar.rad^2*sin(lat))^2)/((equat.rad*cos(lat))^2+(polar.rad*sin(lat))^2))
}
for(i in 1:length(indx$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/",indx$File[i],".gpx", sep="")) %>% mutate(Name = indx$File[i])
ifelse(i==1,runs <- run, runs <- rbind.data.frame(runs,run))
}
View(runs)
library(ggplot2)
ggplot(runs, aes(x=cDist, y=pace))+geom_smooth()
summary(runs$cDist)
length(unique(runs$Name))
ggplot(runs, aes(x=cDist, y=elev.offset))+geom_smooth()
ggplot(runs, aes(x=cDist, y=pace, col=grade))+geom_smooth()
ggplot(runs, aes(x=cDist, y=pace, col=grade))+geom_point(position="jitter")
ggplot(runs, aes(x=cDist, y=pace, col=hlen))+geom_point(position="jitter")
ggplot(runs, aes(x=cDist, y=elev.offset, col=hlen))+geom_point(position="jitter")
ggplot(runs, aes(x=cDist, y=elev.offset, col=Name))+geom_point(position="jitter")
.7*36
.14/sqrt(45)
?scatter.smooth()
19*.7
13.26*.7
library(mosaic)
boxplot(mtcars$mpg~mtcars$am)
boxplot(mtcars$mpg,mtcars$am)
boxplot(mtcars$mpg~mtcars$am)
boxplot(mtcars$mpg,mtcars$am)
boxplot(mtcars$am, mtcars$mpg)
boxplot(mtcars$mpg,mtcars$am)
boxplot(mtcars$mpg~mtcars$am)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
equat.rad <- 6378.1370
geocent.rad <- function(lat){
polar.rad <-6356.7523
equat.rad <- 6378.1370
sqrt(((equat.rad^2*cos(lat))^2+(polar.rad^2*sin(lat))^2)/((equat.rad*cos(lat))^2+(polar.rad*sin(lat))^2))
}
DHpath <- function(lon,lat,elevation){
d <- vector(mode="numeric", length=length(lon))
d[1] <- 0
for(i in 2:length(lon)){
d[i] <- distHaversine(c(lon[i-1],lat[i-1]),c(lon[i],lat[i]), r=geocent.rad(lat[i])*1000+(elevation[i]/3.28084))
}
return(d*0.000621371) #convert from meters to miles
}
getRunDF <- function(filename) {
pfile <- htmlTreeParse(filename,
error = function (...) {}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
speeds <- xpathSApply(pfile, path = "//trkpt/speed", xmlValue)
#convert speed from meters/sec to minutes/mile and clean
speeds <- 26.8224/as.numeric(speeds)
speeds[1] <- 0 #first speed is 0 m/s
speeds <- ifelse(speeds>12, mean(speeds),speeds)
speeds <- ifelse(speeds<5, mean(speeds),speeds)
#convert elevation to feet from meters
elevations <- elevations*3.28084
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
# Put everything in a dataframe and get rid of old variables
geodf <- data.frame(lat = lats, lon = lons, elev = elevations, time = times, pace=speeds)
rm(list=c("elevations", "lats", "lons", "pfile", "times", "coords", "speeds"))
geodf$time <- as.POSIXct(strptime(geodf$time, format = "%Y-%m-%dT%H:%M:%OS"))
geodf$elapsed.time <- as.numeric(difftime(geodf$time,geodf$time[1], units = "mins"))
geodf$distance <- as.numeric(geodf$elapsed.time/geodf$pace)
geodf$distH <- DHpath(geodf$lon,geodf$lat, geodf$elev)
geodf$cDist <- cumsum(geodf$distH)
geodf$elev.offset <- geodf$elev - mean(geodf$elev[1:3])
geodf$elev.lag <- geodf$elev - lag(geodf$elev)
geodf$updown <- ifelse(geodf$elev.lag>1.5,"up",ifelse(geodf$elev.lag<(-1.5),"down","flat"))
#hillDF <- rle(geodf$updown)
#hillDF <- data.frame(values=hillDF$values,lengths=hillDF$lengths)
#geodf$pace.offset <- geodf$pace - lag(geodf$pace)
#geodf$total.elev.change <- cumsum(abs(geodf$elev.change))
return(geodf)
}
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(XML)
library(lubridate)
library(geosphere)
library(dplyr)
library(tidyr)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
indx <- read.table("/home/jpreszler/garmin-220/GPX/index-data.org", strip.white = TRUE, sep = "|", header=TRUE) %>% select(File, Location) %>% filter(Location == "Tacoma")
indxGC <- read.table("/home/jpreszler/garmin-220/GPX/gc-index.org", strip.white = TRUE, sep="|", header=TRUE) %>% select(File, Location) %>% filter(Location=="Tacoma")
for(i in 1:length(indx$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/",indx$File[i],".gpx", sep="")) %>% mutate(Name = indx$File[i])
ifelse(i==1,runs <- run, runs <- rbind.data.frame(runs,run))
}
for(i in 1:length(indx$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/",indx$File[i],".gpx", sep="")) %>% mutate(Name = indx$File[i])
ifelse(i==1,runs <- run, runs <- rbind.data.frame(runs,run))
}
for(i in 1:length(indxGC$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/from-gc/",indxGC$File[i],sep=""))
runs <- rbind.data.frame(runs,run)
}
names(runs)
names(run)
for(i in 1:length(indxGC$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/from-gc/",indxGC$File[i],sep="")) %>% mutate(Name = indxGC$File[i])
runs <- rbind.data.frame(runs,run)
}
length(unique(runs$Name))
View(runs)
ggplot(runs, aes(x=elapsed.time, y=pace))+geom_point(position="jitter")+geom_smooth()
group_by(runs, Name) %>% summarise(ap = mean(pace))
group_by(runs[runs$pace< Inf,], Name) %>% summarise(ap = mean(pace))
group_by(runs[runs$pace< Inf,], Name) %>% summarise(ap = mean(pace)) %>% order_by(ap)
group_by(runs[runs$pace< Inf,], Name) %>% summarise(ap = mean(pace)) %>% order_by(ap)
group_by(runs[runs$pace< Inf,], Name) %>% summarise(ap = mean(pace)) %>% order_by(ap, ap)
?order_by
group_by(runs[runs$pace< Inf,], Name) %>% summarise(ap = mean(pace)) %>% arrange(ap)
rm(runs)
for(i in 1:length(indxGC$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/from-gc/",indxGC$File[i],sep="")) %>% mutate(Name = indxGC$File[i])
runs <- rbind.data.frame(runs,run)
}
runs <- run
for(i in 1:length(indxGC$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/from-gc/",indxGC$File[i],sep="")) %>% mutate(Name = indxGC$File[i])
runs <- rbind.data.frame(runs,run)
}
View(runs)
summary(runs)
difftime(runs$elapsed.time, lag(runs$elapsed.time))
runs$apace <- runs$elapsed.time/runs$cDist
ggplot(runs, aes(x=elapsed.time, y=apace))+geom_point(position="jitter")+geom_smooth()
ggplot(runs[runs$cDist>0.25,], aes(x=elapsed.time, y=apace))+geom_point(position="jitter")+geom_smooth()
ggplot(runs[runs$cDist>0.25,], aes(x=cDist, y=apace))+geom_point(position="jitter")+geom_smooth()
ggplot(runs[runs$cDist>0.25,], aes(x=cDist, y=elev.offset))+geom_point(position="jitter")+geom_smooth()
ggplot(runs[runs$cDist>0.25,], aes(x=elev.offset, y=apace))+geom_point(position="jitter")+geom_smooth()
names(runs)
write.csv(runs, file = "tacoma-runs.csv", row.names = FALSE)
shiny::runApp(appDir = "/home/jpreszler/github-web/tacoma-run/")
shiny::runApp(appDir = "/home/jpreszler/github-web/tacoma-runs/")
shiny::runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
shiny::runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
shiny::runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
shiny::runExample("01_hello")
shiny::runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
shiny::runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
shiny::runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
library(shiny)
runApp()
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/test")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/test")
runApp(appDir = "/home/jpreszler/github-web/test")
runApp(appDir = "/home/jpreszler/github-web/test")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/test")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/test")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/test")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
as.data.frame(x = runs$cDist, y=runs$apace) %>% ggplot(aes(x=x,y=y))+geom_point()
as.data.frame(d= runs$cDist, p=runs$apace) %>% ggplot(aes(x=d,y=p))+geom_point()
data.frame(d= runs$cDist, p=runs$apace) %>% ggplot(aes(x=d,y=p))+geom_point()
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jpreszler',
token='1F7BA6AABC143C8ED6C970F982FB555B',
secret='PklKdtbqwb8w+8kjwoTcGuOn9vPJrcsv3ejD6hF0')
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
runApp(appDir = "/home/jpreszler/github-web/tacoma-runs")
rsconnect::deployApp(appDir = "/home/jpreszler/github-web/tacoma-runs/")
rsconnect::deployApp(appDir = "/home/jpreszler/github-web/tacoma-runs/")
runs <- read.csv("/home/jpreszler/github-web/tacoma-runs/tacoma-runs.csv", header=TRUE)
length(unique(runs$Name))
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(XML)
library(lubridate)
getRunDF <- function(filename) {
pfile <- htmlTreeParse(filename,
error = function (...) {}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
speeds <- xpathSApply(pfile, path = "//trkpt/speed", xmlValue)
#convert speed from meters/sec to minutes/mile and clean
speeds <- 26.8224/as.numeric(speeds)
speeds[1] <- 0 #first speed is 0 m/s
speeds <- ifelse(speeds>12, mean(speeds),speeds)
speeds <- ifelse(speeds<5.5, mean(speeds),speeds)
#convert elevation to feet from meters
elevations <- elevations*3.28084
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
# Put everything in a dataframe and get rid of old variables
geodf <- data.frame(lat = lats, lon = lons, elev = elevations, time = times, pace=speeds)
rm(list=c("elevations", "lats", "lons", "pfile", "times", "coords", "speeds"))
geodf$time <- as.POSIXct(strptime(geodf$time, format = "%Y-%m-%dT%H:%M:%OS"))
geodf$elapsed.time <- difftime(geodf$time,geodf$time[1])/60
geodf$distance <- geodf$elapsed.time/geodf$pace
geodf$elev.offset <- geodf$elev - mean(geodf$elev[1:10])
geodf$elev.lag <- geodf$elev - lag(geodf$elev)
#geodf$pace.offset <- geodf$pace - lag(geodf$pace)
#geodf$total.elev.change <- cumsum(abs(geodf$elev.change))
return(geodf)
}
library(dplyr)
library(ggplot2)
indx <- read.table("/home/jpreszler/garmin-220/GPX/index-data.org", strip.white = TRUE, sep = "|", header=TRUE) %>% select(File, Location) %>% filter(Location == "Tacoma")
indxGC <- read.table("/home/jpreszler/garmin-220/GPX/gc-index.org", strip.white = TRUE, sep="|", header=TRUE) %>% select(File, Location) %>% filter(Location=="Tacoma")
for(i in 1:length(indx$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/",indx$File[i],".gpx", sep="")) %>% mutate(Name = indx$File[i])
ifelse(i==1,runs <- run, runs <- rbind.data.frame(runs,run))
}
for(i in 1:length(indxGC$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/from-gc/",indxGC$File[i],sep="")) %>% mutate(Name = indxGC$File[i])
runs <- rbind.data.frame(runs,run)
}
runs <- mutate(runs, apace = elapsed.time/cDist)
names(runs)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(XML)
library(lubridate)
library(geosphere)
library(dplyr)
geocent.rad <- function(lat){
polar.rad <-6356.7523
equat.rad <- 6378.1370
sqrt(((equat.rad^2*cos(lat))^2+(polar.rad^2*sin(lat))^2)/((equat.rad*cos(lat))^2+(polar.rad*sin(lat))^2))
}
DHpath <- function(lon,lat,elevation){
d <- vector(mode="numeric", length=length(lon))
d[1] <- 0
for(i in 2:length(lon)){
d[i] <- distHaversine(c(lon[i-1],lat[i-1]),c(lon[i],lat[i]), r=geocent.rad(lat[i])*1000+(elevation[i]/3.28084))
}
return(d*0.000621371) #convert from meters to miles
}
getRunDF <- function(filename) {
pfile <- htmlTreeParse(filename,
error = function (...) {}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
speeds <- xpathSApply(pfile, path = "//trkpt/speed", xmlValue)
#convert speed from meters/sec to minutes/mile and clean
speeds <- 26.8224/as.numeric(speeds)
speeds[1] <- 0 #first speed is 0 m/s
speeds <- ifelse(speeds>12, mean(speeds),speeds)
speeds <- ifelse(speeds<5, mean(speeds),speeds)
#convert elevation to feet from meters
elevations <- elevations*3.28084
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
# Put everything in a dataframe and get rid of old variables
geodf <- data.frame(lat = lats, lon = lons, elev = elevations, time = times, pace=speeds)
rm(list=c("elevations", "lats", "lons", "pfile", "times", "coords", "speeds"))
geodf$time <- as.POSIXct(strptime(geodf$time, format = "%Y-%m-%dT%H:%M:%OS"))
geodf$elapsed.time <- as.numeric(difftime(geodf$time,geodf$time[1], units = "mins"))
geodf$distance <- as.numeric(geodf$elapsed.time/geodf$pace)
geodf$distH <- DHpath(geodf$lon,geodf$lat, geodf$elev)
geodf$cDist <- cumsum(geodf$distH)
geodf$elev.offset <- geodf$elev - mean(geodf$elev[1:3])
geodf$elev.lag <- geodf$elev - lag(geodf$elev)
geodf$updown <- ifelse(geodf$elev.lag>2,"up",ifelse(geodf$elev.lag<(-2),"down","flat"))
hills <- rle(geodf$updown)
geodf$hid <- rep(seq_along(hills$lengths), hills$lengths)
geodf$hlen <- hills$lengths[geodf$hid]
hilldf <- filter(geodf, hlen>4) %>% select(elapsed.time, cDist, pace, elev, hid, updown) %>% group_by(hid) %>% summarise(up=if(updown=="up") 1 else if(updown=="down") -1 else 0, grade = ((max(elev)-min(elev))/(max(cDist)-min(cDist)))*(1/5280)*up, hill.pace=mean(pace),hill.length = max(cDist)-min(cDist))
geodf <- left_join(geodf, hilldf, by="hid")
geodf$grade[is.na(geodf$grade)]<-0
#hillDF <- data.frame(values=hillDF$values,lengths=hillDF$lengths)
#geodf$pace.offset <- geodf$pace - lag(geodf$pace)
#geodf$total.elev.change <- cumsum(abs(geodf$elev.change))
return(geodf)
}
indx <- read.table("/home/jpreszler/garmin-220/GPX/index-data.org", strip.white = TRUE, sep = "|", header=TRUE) %>% select(File, Location) %>% filter(Location == "Tacoma")
indxGC <- read.table("/home/jpreszler/garmin-220/GPX/gc-index.org", strip.white = TRUE, sep="|", header=TRUE) %>% select(File, Location) %>% filter(Location=="Tacoma")
for(i in 1:length(indx$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/",indx$File[i],".gpx", sep="")) %>% mutate(Name = indx$File[i])
ifelse(i==1,runs <- run, runs <- rbind.data.frame(runs,run))
}
for(i in 1:length(indxGC$File)){
run <- getRunDF(paste("/home/jpreszler/garmin-220/GPX/from-gc/",indxGC$File[i],sep="")) %>% mutate(Name = indxGC$File[i])
runs <- rbind.data.frame(runs,run)
}
names(runs)
summary(pace)
summary(runs$pace)
runs <- mutate(runs, apace = elapsed.time/cDist)
runs <- select(runs, -hid, -hill.pace, -hill.length)
summary(runs)
runs <- select(runs, -up, -updown, -distance, -hlen)
write.csv(runs, "/home/jpreszler/github-web/tacoma-runs/tacoma-runs.csv", row.names = FALSE)
rsconnect::deployApp(appDir = "/home/jpreszler/github-web/tacoma-runs/")
A <- 0+cumsum(rnorm(100, 0,1))
B <- 0+cumsum(rnorm(100, 0,1))
C <- 0+cumsum(rnorm(100, 0,1))
D <- 0+cumsum(rnorm(100, 0,1))
rw1d <- data.frame(A,B,C,D)
library(tidyr)
library(ggplot2)
head(rw1d)
rw1d$idx <- 1:100
rw1d %>% gather(key=walker, value=position, -idx) %>% ggplot(aes(x=position, y=idx, col=walker))+geom_line()
rw1d %>% gather(key=walker, value=position, -idx) %>% ggplot(aes(y=position, x=idx, col=walker))+geom_line()
install.packages("xkcd")
library(xkcd)
install.packages("xkcd", dependencies=TRUE)
install.packages("Hmisc")
install.packages("viridis")
devtools::install_github('sjmgarnier/viridis')
install.packages("xkcd", dependencies=TRUE)
library(xkcd)
rw1d %>% gather(key=walker, value=position, -idx) %>% ggplot(aes(y=position, x=idx, col=walker))+geom_line()+theme_xkcd()
rw1d %>% gather(key=walker, value=position, -idx) %>% ggplot(aes(y=position, x=idx, col=walker))+xkcdline()+theme_xkcd()
qt(.035, df=8)
1600-1573.23
#et-up a db connection
library(DBI)
db <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
?dbConnect
db <- dbConnect(RSQLite::SQLite(), dbname = "/home/jpreszler/gitlab/cs270-s18/data/jacs.sqlite")
dbListTables(db)
dbGetQuery(db, "SELECT DOI FROM Papers")
dbGetQuery(db, "SELECT DOI, COUNT(DISTINCT(paperID)) FROM Papers GROUP BY DOI")
db <- dbConnect(RSQLite::SQLite(), dbname = "/home/jpreszler/gitlab/cs270-s18/data/chinook.db")
dbListTables(db)
dbListFields(db, "sqlite_sequence")
dbListFields(db, "sqlite_stat1")
dbListFields(db, "genres")
dbListFields(db, "tracks")
shiny::runApp(appDir = "/home/jpreszler/gitlab/cs270-s18/SQL_Injection/")
shiny::runApp(appDir = "/home/jpreszler/gitlab/cs270-s18/SQL_Injection/")
shiny::runApp(appDir = "/home/jpreszler/gitlab/cs270-s18/SQL_Injection/")
shiny::runApp(appDir = "/home/jpreszler/gitlab/cs270-s18/SQL_Injection/")
shiny::runApp(appDir = "/home/jpreszler/gitlab/cs270-s18/SQL_Injection/")
?dbGetQuery
shiny::runApp(appDir = "/home/jpreszler/gitlab/cs270-s18/SQL_Injection/")
shiny::runApp(appDir = "/home/jpreszler/gitlab/cs270-s18/SQL_Injection/")
?dbSendQuery
?dbSendStatement
?dbExecute
shiny::runApp(appDir = "/home/jpreszler/gitlab/cs270-s18/SQL_Injection/")
install.packages("XKCDData")
install.packages("XKCDdata")
library(XKCDdata)
print_xkcd(327)
get_xkcd(327)
get_comic(327)
bt <-get_comic(327)
View(bt)
287-143
383-191
63439+383+923-269
54678+287
54965-6073-5
34664+143
20014+144
20158-6076
63439+383+923
64745-269
44175+191+461
44827-135
19264+192+462
19918-134
64476-19784
48887-14082
?sample
shiny::runApp('gitlab/m125-NEW/Random_Rectangles')
shiny::runApp('gitlab/m125-NEW/Random_Rectangles')
shiny::runApp('gitlab/m125-NEW/Random_Rectangles')
#get data
bugtownDF <- read.csv("data.org", sep="|", header=TRUE, strip.white = TRUE)
setwd("~/gitlab/m125-NEW/Random_Rectangles")
#get data
bugtownDF <- read.csv("data.org", sep="|", header=TRUE, strip.white = TRUE)
library(ggplot2)
ggplot(bugtownDF, aes(x=Xcoord, y=Ycoord))+geom_tile(col="black", fill="white")
ggplot(bugtownDF, aes(x=Xcoord, y=Ycoord))+geom_tile(col="black", fill="white", size=10)
ggplot(bugtownDF, aes(x=Xcoord, y=Ycoord))+geom_tile(col="black", fill="white")+theme_void()
ggplot(bugtownDF, aes(x=Xcoord, y=Ycoord))+geom_tile(col="black", fill="white")+theme_void()+ggitle("BugTown Appartments")
ggplot(bugtownDF, aes(x=Xcoord, y=Ycoord))+geom_tile(col="black", fill="white")+theme_void()+ggtitle("BugTown Appartments")
shiny::runApp('gitlab/m125-NEW/Random_Rectangles')
runApp()
runApp()
runApp()
?geom_tile
?linetype
ggplot(bugtownDF, aes(x=Xcoord, y=Ycoord))+geom_tile(col="black", fill="white",size=2)+theme_void()+ggtitle("BugTown Appartments")
runApp()
#clean
bugtownDF <- filter(bugtownDF, !is.na(apartNumber))
#get sample
apts<-unique(bugtownDF$apartNumber)
apts
min(apts)
max(apts)
min(apts):max(apts)
sample(apts, 5)
runApp()
idx <- sample(apts, runif(2,17))
idx <- sample(apts, runif(1,2:17))
runif(2:17)
runif(2:17,1)
runif(1,2:17)
idx <- sample(apts, 4)
idx
btSample<-filter(bugtownDF, apartNumber %in% idx)
#plot sampled appartments
ggplot(btSample, aes(x=Xcoord, y=Ycoord))+geom_tile(col="black", fill="white", size=2)+theme_void()+ggtitle("Bugtown Appartments")
idx <- sample(apts, 1)
btSample<-filter(bugtownDF, apartNumber %in% idx)
#plot sampled appartments
ggplot(btSample, aes(x=Xcoord, y=Ycoord))+geom_tile(col="black", fill="white", size=2)+theme_void()+ggtitle("Bugtown Appartments")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
apts
idx <- sample(apts, 5)
dix
idx
bugtownDF[bugtownDF$apartNumber==idx,]
bugtownDF[bugtownDF$apartNumber %in% idx,]
bugtownDF[bugtownDF$apartNumber %in% idx,] %>% select(apartNumber, area) %>% group_by(apartNumber) %>% summarise(Area=mean(area))
runApp()
runApp()
runApp()
s <- -1
idx <- ifelse(s==-1, apts, sample(apts, s))
idx
idx <-vector()
idx <- ifelse(s==-1, apts, sample(apts, s))
idx
s=5
idx <- ifelse(s==-1, apts, sample(apts, s))
idx
idx <- ifelse(s==-1, apts, sample(apts, s))
idx
idx <- ifelse(s==-1, apts, sample(apts, 5))
idx
sample(apts, 5)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
areas2 <- c(1, 6, 12, 18, 5)
areas3 <- c(5, 10, 1, 2, 3)
lapply(list(areas2, areas3), mean)
sapply(list(areas2, areas3), mean)
vapply(list(areas2, areas3), mean)
?getModel
?res
??getModel
??res
